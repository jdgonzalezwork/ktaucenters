// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// distance
NumericMatrix distance(NumericMatrix x);
RcppExport SEXP _ktaucenters_distance(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(distance(x));
    return rcpp_result_gen;
END_RCPP
}
// ktaucenters_run
List ktaucenters_run(NumericMatrix x, NumericMatrix centers, const double tolerance, const std::size_t max_iter);
RcppExport SEXP _ktaucenters_ktaucenters_run(SEXP xSEXP, SEXP centersSEXP, SEXP toleranceSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(ktaucenters_run(x, centers, tolerance, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// flag_outliers
List flag_outliers(const double cutoff, const double b, List ktau);
RcppExport SEXP _ktaucenters_flag_outliers(SEXP cutoffSEXP, SEXP bSEXP, SEXP ktauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< List >::type ktau(ktauSEXP);
    rcpp_result_gen = Rcpp::wrap(flag_outliers(cutoff, b, ktau));
    return rcpp_result_gen;
END_RCPP
}
// rhoOpt
NumericVector rhoOpt(NumericVector x, const double c);
RcppExport SEXP _ktaucenters_rhoOpt(SEXP xSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(rhoOpt(x, c));
    return rcpp_result_gen;
END_RCPP
}
// psiOpt
NumericVector psiOpt(NumericVector x, const double c);
RcppExport SEXP _ktaucenters_psiOpt(SEXP xSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(psiOpt(x, c));
    return rcpp_result_gen;
END_RCPP
}
// derpsiOpt
NumericVector derpsiOpt(NumericVector x, double c);
RcppExport SEXP _ktaucenters_derpsiOpt(SEXP xSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(derpsiOpt(x, c));
    return rcpp_result_gen;
END_RCPP
}
// robinden
List robinden(NumericMatrix D, const std::size_t n_clusters, const std::size_t mp);
RcppExport SEXP _ktaucenters_robinden(SEXP DSEXP, SEXP n_clustersSEXP, SEXP mpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n_clusters(n_clustersSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type mp(mpSEXP);
    rcpp_result_gen = Rcpp::wrap(robinden(D, n_clusters, mp));
    return rcpp_result_gen;
END_RCPP
}
// normal_consistency_constants
double normal_consistency_constants(const std::size_t p);
RcppExport SEXP _ktaucenters_normal_consistency_constants(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::size_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_consistency_constants(p));
    return rcpp_result_gen;
END_RCPP
}
// Mscale
double Mscale(NumericVector u, const double c, const double b);
RcppExport SEXP _ktaucenters_Mscale(SEXP uSEXP, SEXP cSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(Mscale(u, c, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ktaucenters_distance", (DL_FUNC) &_ktaucenters_distance, 1},
    {"_ktaucenters_ktaucenters_run", (DL_FUNC) &_ktaucenters_ktaucenters_run, 4},
    {"_ktaucenters_flag_outliers", (DL_FUNC) &_ktaucenters_flag_outliers, 3},
    {"_ktaucenters_rhoOpt", (DL_FUNC) &_ktaucenters_rhoOpt, 2},
    {"_ktaucenters_psiOpt", (DL_FUNC) &_ktaucenters_psiOpt, 2},
    {"_ktaucenters_derpsiOpt", (DL_FUNC) &_ktaucenters_derpsiOpt, 2},
    {"_ktaucenters_robinden", (DL_FUNC) &_ktaucenters_robinden, 3},
    {"_ktaucenters_normal_consistency_constants", (DL_FUNC) &_ktaucenters_normal_consistency_constants, 1},
    {"_ktaucenters_Mscale", (DL_FUNC) &_ktaucenters_Mscale, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ktaucenters(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
